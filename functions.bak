#lang racket
;;;Funcation handling
(require compatibility/mlist)

;;; Definition of a function
;;;INPUT:
;;; "myfunc" '("var1" ... "varN") '(... body ...)
;;;   name     parameter_list      body_statements
(define functions (mlist (mlist "myfunc" '("a" "b") '("a" "=" "b" "+" "2")) (mlist "myfunc2" '("c" "d") '("c" "=" "d" "*" "3"))))

;Pushes a new function onto the stack
(define (defineFunc name args body)
  (mappend! functions (mlist (mlist name args body))))

;;; Gets the arugment list of a specific function
(define getArgs
  (lambda (funcs name)
    (if (null? funcs)
        "No user-defined functions found"
        (if (equal? (mcar (mcar funcs)) name)
                (mlist-ref (mcar funcs) 1)
                (getArgs (mcdr funcs) name)))))

;;; Gets the body of a specific function
(define getBody
  (lambda (funcs name)
    (if (null? funcs)
        "No user-defined functions found"
        (if (equal? (mcar (mcar funcs)) name)
            (mlist-ref (mcar funcs) 2)
            (getBody (mcdr funcs) name)))))



;;; TESTS
(defineFunc "myfunc3" '("e" "f") '("e" "=" "f" "*" "3" "g"))

(getArgs functions "myfunc2")
(getBody functions "myfunc2")

(getArgs functions "myfunc")
(getBody functions "myfunc")

(getArgs functions "myfunc3")
(getBody functions "myfunc3")
